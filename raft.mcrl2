%  This is the formal specification for the Raft consensus algorithm.
%
%  Copyright 2023 Pham Duc Minh 
%  TODO add license 
%

% Server states
sort State = struct follower | leader | candidate | crash;

% Global variable 
% N is the number of servers iin the cluster 
% BATCH_SIZE is how many entries sent when request to append entries. We assume that BATCH_SIZE is 1 in out paper.  
map	N, BATCH_SIZE, LIMIT_TERM: Nat;

% Intialize the Global Variable
eqn N = 3;
	BATCH_SIZE = 1;
	LIMIT_TERM = 3;   

% log term function 
% Input: one list of log of type Nat and position of that index you want to find the log term
% Return the term of the index in a log
map logTerm: List(Nat) # Int -> Nat;
var  l: List(Nat);
     x: Int;
eqn	(x < 1) -> logTerm(l, x) = 0;
	(x > #l) -> logTerm(l, x) = 0;
	(x >= 1 && x <= #l) -> logTerm(l,x) = l . abs(x-1);   

% Initalize list 
% input: 
% param 1: Size of the list 
% param 2: Number v
% return the list with of size element which is v. 
map initList: Nat # Nat -> List(Nat);   
	initListHelper: Nat # Nat # Nat -> List(Nat);   
var size, v, c: Nat; 
eqn initList(size, v) = initListHelper(size, v, 0);
	(c >= size) -> initListHelper(size, v, c) = []; 
	(c < size) -> initListHelper(size, v, c) = v |> initListHelper(size, v, c+1);

%slice list 
% Input: 
% param 1: list 
% param 2: x  
% param 3: y 
% return l[x:y] like python 
map slice: List(Nat) # Int # Int -> List(Nat);  
	growSlice: List(Nat) # List(Nat) # Int # Int # Int -> List(Nat); 
var a, b: List(Nat);
	x, y, n: Int; 	
eqn slice(a, x, y) = growSlice([], a, x, y, 0);
	n < x -> growSlice(b, a, x, y, n) = growSlice(b, a, x, y, n + 1);
	n >= y -> growSlice(b, a, x, y, n) = b;
	(n >= x && n < y) -> growSlice(b, a, x, y, n) = growSlice(b <| a.abs(n), a, x, y, n + 1);

%Rep;ace an element from a list 
% Input: List 
% param 1: i element at position i that needed to be replaced. 
% param 2: Replaced value
% Output: List with element at position i replaced by x
map replace: List(Nat) # Nat # Nat -> List(Nat);  

var a: List(Nat);
	i: Nat; 
	x: Nat; 

eqn (a . i != x) -> replace(a, i, x) = slice(a, 0, i) ++ [x] ++ slice(a, i+1, #a);
	(a . i == x) -> replace(a, i, x) = a;

% Implement insertion sort (increasing order)
% Input: List 
% Output: Sorted lis tin assending order 
map sortAssendingOrder: List(Nat) -> List(Nat);
	sortAssendingOrderHelper: List(Nat) # List(Nat) -> List(Nat);
	insert: List(Nat) # Nat -> List(Nat); 
	insertHelper: List(Nat) # List(Nat) # Nat -> List(Nat); 

var l, ls: List(Nat);
	x: Nat;

eqn	sortAssendingOrder(l) = sortAssendingOrderHelper(l, []);
	(#l == 0) -> sortAssendingOrderHelper(l, ls) = ls; 
	(#l > 0) -> sortAssendingOrderHelper(l, ls) = sortAssendingOrderHelper(tail(l), insert(ls, head(l)));
	insert(l,x) = insertHelper([], l, x);
	(#l == 0) -> insertHelper(ls, l, x) = ls <| x; 
	(#l > 0 && head(l) < x) -> insertHelper(ls, l, x) = insertHelper(ls <| head(l), tail(l), x);
	(#l > 0 && head(l) >= x) -> insertHelper(ls, l, x) = (ls <| x) ++ l; 


act
  	sendClientRequest, wlog, receiveClientRequest: Nat;
	stop, timeout, becomeLeader, AddVoteToItself, stepDown, test, resume, advanceCommitIndex;  
	% param1: type of vote request 
	% param2: current term
	% param3: last log term 
	% param4: last log index
	% param5: source or destination 
	% param6: source or destination
	requestVote, handleRequestVoteRequest, requestVoteSent: Nat # Nat # Nat # Nat # Nat;
	sendReply, handleRequestVoteReply, replyVoteSent: Nat # Bool # Nat # Nat; 
%(term, prevIndex, prevTerm, entries, commitIndex, from, to)
	%param 1: current term of the source 
	%param 2: prevIndex 
	%param 3: prevTerm 
	%param 4: entries 
	%param 5: commitIndex 
	%param 5: source or destination 
	%param 6: source or destination  
	sendAppendEntriesRequest,handleAppendEntriesRequest, appendEntriesRequestSent: Nat # Int # Nat # List(Nat) # Int # Nat # Nat; 
	%param 1: current term of the desitnation 
	%param 2: sucess or not (true is succes, otherwise not)
	%param 3: matchIndex  
	%param 4: current term
	%param 5: prevIndex 
	%param 6: prevTerm 
	%param 7: entries 
	%param 8: commitIndex 
	%param 9: source or destination 
	%param 10: source or destination
	sendAppendEntriesReply, handleAppendEntriesReply, appendEntriesRequestReplied: Nat # Bool # Nat # Nat # Int # Nat # List(Nat) # Int # Nat # Nat; 


proc
	% Client process 
	% First initalize with a integer n greater than 4. The client process will send n requests and the server will put n of those into their logs. 
	Client(num: Nat) = (num >= 1) -> sendClientRequest(num) .  Client(num = abs(num-1));
	
	% Node process: 
	% param: id of the node - id starts from 0.
	% state: state of the node define by sorted State. There are three states of a node: leader, follower, candidate and crashed defined in struct State. 
	% l: List is that contains the log of the node. (Temrn and index)
	% voterlLog: List of Natural number 
	% term: current term of the node  of Node  
	% Votedfor if it does not vote for anyone, it is 0, otherwise the index of the voted node   
	% nextIndex: map from server id to the next index of that server 
	% matchIndex: map from server id to the match index of that server
	% commitIndex: map from server id to the commited index of that server
 	Node(id: Nat, state: State, l: List(Nat), voterLog: List(Nat), term: Nat, votedFor: Nat, nextIndex: List(Nat), matchIndex: List(Nat), commitIndex: Nat) = 
	% Limit the number of term a server can have. 
	(term < LIMIT_TERM) -> (
		% If node is a leader, then the client can sendClientRequest message to that node and update the matchIndex of that node
		((state == leader) -> (sum v:Nat . receiveClientRequest(v). Node(l = l ++ [term], matchIndex = replace(matchIndex, id, #l+1))))
		
		% A node can stop anytime. The node state change to crash. 
		+ (state != crash) -> stop . Node(state = crash)

		% If a node is crashed, then it can resume.  
		+ (state == crash) -> resume . Node(state = follower)

		% if it time out, then it changes to the candidate state and term + 1 (Timeout here means that we start the the new election)
		+ (state == follower || state == candidate) 
			-> timeout . Node(state = candidate, term = term+1, votedFor = id, voterLog = [id], matchIndex = initList(N, 0), nextIndex = initList(N, 1))
		
		% If it is a candiate then it sends the request vote request. 
		+ (state == candidate) -> (    
			sum d: Nat . (!(d in voterLog)) -> requestVote(term, logTerm(l, #l), #l, id, d). Node()
			+ 	
			% If d is not in the voterlog, add d in the voter log 
			sum d: Nat . (!(d in voterLog)) -> 
				(
				handleRequestVoteReply(term, true, id, d). Node(voterLog = voterLog <| d) 
				+ 
				handleRequestVoteReply(term, false, id, d). Node()
				)
			+ 
			% If it receives the majority of the vode then the node can become a leader 
			((#voterLog*2 > N)) -> becomeLeader . Node(state = leader, nextIndex = initList(N, #l+1))) 

	% Any node can handle the Vote Reqeust. 1 %TODO delete candidate for the vote request becaues all node can handle this
	+ (state != candidate && state != crash) -> (
		% For the reply, it does not change the state of the node? 
		sum d, lastlogterm, requestTerm: Nat . sum lastlogindex: Nat . handleRequestVoteRequest(requestTerm, lastlogterm, lastlogindex,d,id) .
		(term < requestTerm) -> stepDown . Node(term = requestTerm, state = follower, votedFor = 0) 
							<> 
							(term == requestTerm && 
							(votedFor == 0 || votedFor == requestTerm) 
								&& (lastlogterm > logTerm(l, #l) || (lastlogterm == logTerm(l, #l) && lastlogindex >= #l))) %TOODO change this to log term 
									-> sendReply(term, true,d ,id).Node(votedFor = d) 
									<> sendReply(term, false, d, id) . Node())  
		
	+ sum peer: Nat . (peer != id && peer < N && state == leader && nextIndex . peer <= #l) -> ((matchIndex . peer +1 < nextIndex . peer) 
		-> 
		sendAppendEntriesRequest(term, nextIndex . peer - 1, logTerm(l,  (nextIndex . peer) - 1), slice(l, nextIndex . peer - 1, nextIndex . peer - 1), min(commitIndex, nextIndex . peer - 1), id, peer)
		<> 
		sendAppendEntriesRequest(term, nextIndex . peer - 1, logTerm(l,  (nextIndex . peer) - 1), slice(l, nextIndex . peer - 1, min((nextIndex . peer) - 1 + BATCH_SIZE, #l)), min(commitIndex, (nextIndex . peer) - 1 + BATCH_SIZE), id, peer)
		) . Node()

	+ (state != crash) -> (sum requestTerm: Nat, requestPreIndex: Int, requestPreTerm: Nat, requestEntires: List(Nat), requestCommitIndex: Int, from: Nat. 
		handleAppendEntriesRequest(requestTerm, requestPreIndex, requestPreTerm, requestEntires, requestCommitIndex, from, id)
		. 
		(term < requestTerm) -> (stepDown . Node(term = requestTerm, state = follower, votedFor = 0)) 
		<> 
		((term == requestTerm && (requestPreIndex == 0 || requestPreIndex <= #l && logTerm(l, requestPreIndex) ==  requestPreTerm)) 	
			-> sendAppendEntriesReply(term, true, abs(requestPreIndex) + #requestEntires, requestTerm, requestPreIndex, requestPreTerm, requestEntires, requestCommitIndex, from, id) . Node(l = slice(l, 0, abs(requestPreIndex)) ++ requestEntires, state = follower)
			<> sendAppendEntriesReply(term, false, 0, requestTerm, requestPreIndex, requestPreTerm, requestEntires, requestCommitIndex, from, id)).Node())

	+ (state != crash) -> (sum replyTerm: Nat, success: Bool, replyMatchIndex: Nat, requestTerm: Nat, requestPreIndex: Int, requestPreTerm: Nat, requestEntires: List(Nat), requestCommitIndex: Int, from: Nat, to: Nat . 
		handleAppendEntriesReply(replyTerm, success, replyMatchIndex, requestTerm, requestPreIndex, requestPreTerm, requestEntires, requestCommitIndex, from, to) 
		. (term < replyTerm) ->  stepDown . Node(term = replyTerm, state = follower, votedFor = 0) 
							 <> ((state == leader && term == replyTerm)  -> ((success == true) -> test . Node(matchIndex = replace(matchIndex, to, max(matchIndex . to, replyMatchIndex)), nextIndex = replace(nextIndex, to, replyMatchIndex + 1))
																							<>  test . Node(nextIndex = replace(nextIndex, to, max(1, nextIndex . to - 1)))))) 
	
	% WHen the sate is leader and the logterm is up to date , then the node can advanceCommitIndex. We find the commit index by sorting the array and taking the median of that. (We use floor to change from Real to Int and abs to change from Int to Nat.) 
	+ (state == leader && logTerm(l, #l) == term) -> advanceCommitIndex . Node(commitIndex = sortAssendingOrder(matchIndex) . abs(floor(N/2)))

	);      


init
  allow(
    { stop, timeout, becomeLeader, requestVoteSent, replyVoteSent, AddVoteToItself, stepDown, wlog, test, appendEntriesRequestSent, appendEntriesRequestReplied, resume,advanceCommitIndex},
    comm(
      	{sendClientRequest|receiveClientRequest -> wlog,
		requestVote|handleRequestVoteRequest -> requestVoteSent,
		sendReply|handleRequestVoteReply -> replyVoteSent,
		sendAppendEntriesRequest | handleAppendEntriesRequest -> appendEntriesRequestSent,
		sendAppendEntriesReply | handleAppendEntriesReply -> appendEntriesRequestReplied}, 
      Client(3) || Node(0, follower, [], [], 1, 0, initList(N, 1), initList(N, 0), 0) || Node(1, follower, [], [], 1, 0, initList(N, 1), initList(N, 0), 0) || Node(2, follower, [], [], 1, 0, initList(N, 1), initList(N, 0), 0)
  ) ) ;
