%%%%%%% Constants %%%%%%

% no. of servers
map NumberOfServers: Nat;
eqn NumberOfServers = 3;

% max no. of client requests
map NumberOfClientRequests: Pos;
eqn NumberOfClientRequests = 2;

%max no. of terms
map MaxTerm: Pos;
eqn MaxTerm = 2;

% no. of messages the server can hold
map NetworkSize: Pos;
eqn NetworkSize = 3;

map BATCH_SIZE: Pos;
eqn BATCH_SIZE = 1; 

% no. that defines the majority within the cluster 
% we don't model changes in cluster membership so this no. remains constant
map MAJORITY: Pos;
eqn MAJORITY = Int2Pos(ceil(NumberOfServers/2));

%%%%% Data Types %%%%%

% possible states of a node
% We added Crashed state which is an extra state in addition to the state in the paper
sort State = struct Leader | Candidate | Follower | Crashed;

% structure for different kinds of messages
sort RPC = struct RequestVoteRequest(currentTermRPC: Nat, endLogIndex: Nat, endLogTerm: Nat)?isRequestVoteRequest 
                | RequestVoteResponse(currentTermRPC: Nat, isVoteGranted: Bool)?isRequestVoteResponse 
                | AppendEntriesRequest(currentTermRPC: Nat, prevLogIndex: Nat, prevLogTerm: Nat, entries: LogType, leaderCommit: Nat)?isAppendEntriesRequest 
                | AppendEntriesResponse(currentTermRPC: Nat, success: Bool, matchIndexRPC: Nat)?isAppendEntriesResponse;

% structure for handling replies that need to be sent
sort replyHelper = struct none?IsNone 
                        | message(reply: NetworkPayload);

% entry (command) inside the log
sort logEntry = struct Command(term: Nat, commandID: Nat);

% log maitained on each node (list of commands)
sort LogType = List(logEntry);       

% Network layer message
sort NetworkPayload = struct Message(senderID: Nat, rpc: RPC, receiverID: Nat);

%%%%%%% Functions (Equations) %%%%%%%
  
% get term of a particular index of the log
% term of index 0 is 0 because log is 0
map getTerm: LogType # Nat -> Nat;
var log: LogType;
    index: Nat;
eqn getTerm([], index) = 0;
    (log != []) -> getTerm(log, index) = term(log . Int2Nat(index - 1));

% gets the term of the last command in the log
map lastTerm: LogType -> Nat;
var log: LogType;
eqn lastTerm([]) = 0;
    (log != []) -> lastTerm(log) = term(rhead(log));

% slice a log 
% Input: 
% param 1: list 
% param 2: x  
% param 3: y 
% assumption: x <= y
% return l[x:y] return the sublist of index x (inclusive) to y (exclusive)  or if y > #log, l[x:..]
map slice: LogType # Nat # Nat -> LogType;
    sliceHelper: LogType # Nat # Nat # Nat -> LogType; 
var log: LogType;
    index, start, finish: Nat;
    element: logEntry;
eqn slice(log, start, finish) = sliceHelper(log, 0, start, finish);
    (index < start) -> sliceHelper(element |> log,index,start,finish) = sliceHelper(log,index+1,start,finish);
    (index >= start && index < finish) -> sliceHelper(element |> log,index,start,finish) = element |> sliceHelper(log,index+1,start,finish) ;
    (index >= finish || log == []) -> sliceHelper(log,index,start,finish) = [];

% slice a list of naturals (inclusive of first and last) 
% Input: 
% param 1: list 
% param 2: x  
% param 3: y 
% return l[x:y] reuturn the sublist of index x (inclusive) to y (exclusive)  
map sliceNat: List(Nat) # Nat # Nat -> List(Nat);
    sliceHelperNat: List(Nat) # Nat # Nat # Nat -> List(Nat); 
var log: List(Nat);
    start, finish, index: Nat;
    element: Nat;
eqn sliceNat(log, start, finish) = sliceHelperNat(log, 0, start, finish);
    (index < start) -> sliceHelperNat(element |> log,index,start,finish) = sliceHelperNat(log,index+1,start,finish);
    (index >= start && index < finish) -> sliceHelperNat(element |> log,index,start,finish) = element |> sliceHelperNat(log,index+1,start,finish) ;
    (index >= finish || log == []) -> sliceHelperNat(log,index,start,finish) = [];

% Replace an element from a list (improved by tim)
% Input:
% param 1: list: list of Natural number 
% param 2: i element at position i that needed to be replaced. 
% param 3: Replaced value
% Output: List with element at position i replaced by x
map replace: List(Nat) # Nat # Nat -> List(Nat);  
var list: List(Nat);
    index: Nat; 
    item,item': Nat; 
eqn 
  replace([],index,item) = [];
  replace(item'|>list, 0,item) = item |> list;
  (index > 0) -> replace(item'|>list, index,item) = item' |> replace(list,Int2Nat(index-1),item);

% return the no. of servers that have a particular entry at the given index
% Param 1: Index of the entry
% Param 2: No. of servers that have the entry replicated (by default = 1 because the leader always has this entry in their log)
% Param 3: loop counter that goes from 0 to max server id
% Param 4: match index array which stores for each server, index of highest log entry replicated on the server
map findNoOfServersAgree: Nat # List(Nat) -> Nat;
var index: Nat;
    elt: Nat;
    array: List(Nat);
eqn findNoOfServersAgree(index, []) = 1;
    (index <= elt) -> findNoOfServersAgree(index, elt|>array)  = 1 + findNoOfServersAgree(index, array);
    (index > elt) -> findNoOfServersAgree(index,  elt|>array)  = findNoOfServersAgree(index, array);  

% returns the highest index for which a log entry has been replicated on a majority of servers
% Param 1: length of log
% Param 2: match index array which stores for each server, index of highest log entry replicated on the server
map findMaxAgreeIndex: Nat # List(Nat) -> Nat;
var lenLog: Nat;
    array: List(Nat);
eqn (lenLog == 0) -> findMaxAgreeIndex(lenLog, array) = 0;
    (lenLog > 0) -> findMaxAgreeIndex(lenLog, array) = if(findNoOfServersAgree(lenLog, array) < MAJORITY ,findMaxAgreeIndex(Int2Nat(lenLog - 1), array),lenLog);   

% Initalize list 
% input: 
% param 1: Number 
% param 2: Number of Servers (size of the list)
% return the list with of size element which is v. 
map initArray: Nat # Nat -> List(Nat);
var num, numServers: Nat;
eqn initArray(num, 0) = [];
    (numServers > 0) -> initArray(num, numServers) = num |> initArray(num, Int2Nat(numServers - 1));  

% returns a set of append entries messages
% param 1: sender ID
% param 2: nextIndex array
% param 3: current term of the node
% param 4: log
% param 5: commit index of the leader
map CreateAppendEntriesSet: Nat # List(Nat) # Nat # LogType # Nat -> FSet(NetworkPayload);
var sender, termNode, commitIndex: Nat;
    nextIndex: List(Nat);
    log: LogType;
eqn CreateAppendEntriesSet(sender, nextIndex, termNode, log, commitIndex) = CreateAppendEntriesSetHelper(sender, nextIndex, termNode, log, commitIndex, 0);
    
map CreateAppendEntriesSetHelper: Nat # List(Nat) # Nat # LogType # Nat # Nat -> FSet(NetworkPayload);
var sender, termNode, commitIndex, receiver: Nat;
    nextIndex: List(Nat);
    log: LogType;
eqn (receiver == NumberOfServers) -> CreateAppendEntriesSetHelper(sender, nextIndex, termNode, log, commitIndex, receiver) =  {};
    (receiver < NumberOfServers)  -> CreateAppendEntriesSetHelper(sender, nextIndex, termNode, log, commitIndex, receiver) = 
                                     CreateAppendEntriesSetHelper(sender, nextIndex, termNode, log, commitIndex, receiver + 1)
                                     + if(receiver != sender, {CreateAppendEntriesMsg(sender, nextIndex.receiver, termNode, log, commitIndex, receiver)},{});

% creates a single append entries message
map CreateAppendEntriesMsg: Nat # Nat # Nat # LogType # Nat # Nat -> NetworkPayload;
var sender, termNode, commitIndex, receiver: Nat;
    nextIndex_receiver: Nat;
    log: LogType;
eqn (nextIndex_receiver > 0) -> CreateAppendEntriesMsg(sender, nextIndex_receiver, termNode, log, commitIndex, receiver) = 
                                              Message(sender, AppendEntriesRequest(termNode, Int2Nat((nextIndex_receiver)), getTerm(log, Int2Nat((nextIndex_receiver))), slice(log, Int2Nat((nextIndex_receiver)), min(LogLength, ((max(nextIndex_receiver-1, 0))))), min(min(commitIndex, LogLength), max(nextIndex_receiver-1, 0))), receiver) whr LogLength = #log end; 
    (nextIndex_receiver == 0) -> CreateAppendEntriesMsg(sender, nextIndex_receiver, termNode, log, commitIndex, receiver) = 
                                              Message(sender, AppendEntriesRequest(termNode, Int2Nat((nextIndex_receiver)), 0, slice(log, Int2Nat((nextIndex_receiver)), min(LogLength, (max((nextIndex_receiver-1), 0)))), min(min(commitIndex, LogLength), nextIndex_receiver)), receiver) whr LogLength = #log end;


% returns a set of request vote messages
% param 1: sender ID
% param 2: current term of node
% param 3: length of the log
% param 4: last term of the log
% param 5: voter log of node
map CreateRequestVoteSet: Nat # Nat # Nat # Nat # List(Nat) -> FSet(NetworkPayload);
var sender, termNode, lengthLog, lastTermLog: Nat;
    voterLog: List(Nat);
eqn CreateRequestVoteSet(sender, termNode, lengthLog, lastTermLog, voterLog) = CreateRequestVoteSetHelper(sender, termNode, lengthLog, lastTermLog, voterLog, 0);

map CreateRequestVoteSetHelper: Nat # Nat # Nat # Nat # List(Nat) # Nat -> FSet(NetworkPayload);
var sender, termNode, lengthLog, lastTermLog, receiver: Nat;
    voterLog: List(Nat);
    msgSet: FSet(NetworkPayload);
eqn (receiver == NumberOfServers) -> CreateRequestVoteSetHelper(sender, termNode, lengthLog, lastTermLog, voterLog, receiver) = {};
    (receiver < NumberOfServers ) -> CreateRequestVoteSetHelper(sender, termNode, lengthLog, lastTermLog, voterLog, receiver) = 
                                     CreateRequestVoteSetHelper(sender, termNode, lengthLog, lastTermLog, voterLog, receiver + 1 )
                                     + if(receiver != sender && !(receiver in voterLog), {CreateRequestVoteMsg(sender, termNode, lengthLog, lastTermLog, receiver)},{});

% creates a single request vote message
map CreateRequestVoteMsg: Nat # Nat # Nat # Nat # Nat -> NetworkPayload;
var sender, termNode, lengthLog, lastTermLog, receiver: Nat;
eqn CreateRequestVoteMsg(sender, termNode, lengthLog, lastTermLog, receiver) = Message(sender, RequestVoteRequest(termNode, lengthLog, lastTermLog), receiver);


%%%%%%%%%%%%% Conditions %%%%%%%%%%%%%%%%%%%%%%%%%%


map hasVoteTermGreater,ConflictWithLeader,NoConflictWithLeader : NetworkPayload # LogType -> Bool;
    LogOK : NetworkPayload # LogType -> Bool;
    hasVoteTermEqual : NetworkPayload # LogType # Int -> Bool;
    isAdvanceCommitIndexOk : NetworkPayload # LogType # List(Nat) # Nat # Nat -> Bool;
    SliceLengthSmaller,SliceLengthEqual : LogType # NetworkPayload -> Bool;
var msg: NetworkPayload;
    log: LogType;
    votedFor: Int;
    commitIndex,currentTerm,index: Nat;
    matchIndex: List(Nat);
eqn  
    % Condition to call this the currentTerm is greater than term in the message from the candidate term 
    % Check whether the current node should vote for the candidates which sent the msg 
    % Parameter 
    % msg: Message from the network 
    % log: Current log of the node
    % Return bool wheather to vote for the node that sent the request   
    hasVoteTermGreater(msg,log) = ((endLogTerm(rpc(msg)) > lastTerm(log)) 
                                || ((endLogTerm(rpc(msg)) == lastTerm(log) ) && (endLogIndex(rpc(msg)) >= #log)));

    % Condition to call this the currentTerm is eual to term in the  message from the candidate term 
    % Check whether the current node should vote for the candidates which sent the msg 
    % Parameter 
    % msg: Message from the network 
    % log: Current log of the node
    % Return bool wheather to vote for the node that sent the request                            
    hasVoteTermEqual(msg,log,votedFor) = ((endLogTerm(rpc(msg)) > lastTerm(log)) || ((endLogTerm(rpc(msg)) == lastTerm(log)) && (endLogIndex(rpc(msg)) >= #log))) 
                                        && (votedFor == senderID(msg) || votedFor == -1);
    
    % The function is used in checking appendEntries, check if the log of the current node is ok with regards to the msg sent by the leader. 
    % Parameter 
    % msg: Message from the network 
    % log: Current log of the node
    % Return bool whether is the log is ok  
    LogOK(msg,log) = ((prevLogIndexMsg == 0) 
                                || ((prevLogIndexMsg > 0) && (prevLogIndexMsg <= # log) && (prevLogTerm(rpc(msg)) == (getTerm(log, prevLogIndexMsg))))) whr prevLogIndexMsg = prevLogIndex(rpc(msg)) end;

    % The function is used to check if the rquest is successful 
    isAdvanceCommitIndexOk(msg,log,matchIndex,commitIndex,currentTerm) = (((MaxAgreeIndex > 0) 
                                                                    && (getTerm(log, MaxAgreeIndex) == currentTerm) 
                                                                    && (commitIndex != MaxAgreeIndex))) whr MaxAgreeIndex = findMaxAgreeIndex(#log, matchIndex) end;

   SliceLengthSmaller(log,msg) = #log < prevLogIndex(rpc(msg)); % min(#log, index) == index; 
   SliceLengthEqual(log,msg) = #log == prevLogIndex(rpc(msg)); 
   ConflictWithLeader(msg,log) = (# log > prevLogIndex(rpc(msg)) && (getTerm(log, (prevLogIndex(rpc(msg))+1)) != term(head( entries(rpc(msg)) ))));
   NoConflictWithLeader(msg,log) = ((LogLength < prevLogIndex(rpc(msg))) || (LogLength > prevLogIndex(rpc(msg)) && (getTerm(log, (prevLogIndex(rpc(msg))+1)) == term(head( entries(rpc(msg)) ))))) whr LogLength = # log end;
%%%%%%%%%%%%%% Actions %%%%%%%%%%%%%%%%%%%%%%%%%%%%

% actions for sending and receiving messages
act sendToNetwork, receiveFromServer, sendToServer, receiveFromNetwork, sendRPC, receiveRPC: NetworkPayload;

% actions for sending and receiving message sets
act sendToNetworkSet, receiveFromServerSet, sendRPCset: FSet(NetworkPayload);

% actions for sending and receiving client requests
act sendClientRequest, recvClientRequest, clientCommand: Nat;

% action for timing out
act timeout;

% action for advancing the commit index
act advanceCommitIndex: Nat # Nat # Nat # LogType;

% actions for property verification
act exposeLeader: Nat # Nat;
act exposeLog: Nat # Nat # Nat # LogType;
act exposeLogLeader: Nat # LogType;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%% Processes %%%%%%%%%%%%%%%%%%%%%%%%
proc Node_process_receiveFromNetwork(id:Nat, currentState: State, currentTerm: Nat, log: LogType, commitIndex: Nat,
votedFor: Int, voterLog: List(Nat), nextIndex: List(Nat), matchIndex: List(Nat), replyToBeSent: replyHelper) = 

sum msg: NetworkPayload . (receiverID(msg) == id) -> (
            % drop stale message
            (currentTermRPC(rpc(msg)) < currentTerm) -> 
                receiveFromNetwork(msg) . Node()
            +
            % request vote request message with higher term
            % If the last log term in the request message is greater than that of the current note or it it is equal, we need to compare the length of the log to decide what to send  
            ((currentTermRPC(rpc(msg)) > currentTerm) && isRequestVoteRequest(rpc(msg)) && hasVoteTermGreater(msg,log)) -> 
                  % voted for is set to nil so we vote automatically
                  receiveFromNetwork(msg)
                 .Node(currentState = Follower, currentTerm = currentTermRPC(rpc(msg)), votedFor = senderID(msg), replyToBeSent = message(Message(id, RequestVoteResponse(currentTermRPC(rpc(msg)), true) , senderID(msg))))
            +
            ((currentTermRPC(rpc(msg)) > currentTerm) && isRequestVoteRequest(rpc(msg)) && !hasVoteTermGreater(msg,log)) ->
               receiveFromNetwork(msg)
              .Node(currentState = Follower, currentTerm = currentTermRPC(rpc(msg)), votedFor = -1, replyToBeSent = message(Message(id, RequestVoteResponse(currentTermRPC(rpc(msg)), false) , senderID(msg))))
            +
            %msg has same term or is an append entries request with a greater term
            (
                    % If the last log term in the request message is greater than that of the current note or it it is equal, we need to compare the length of the log to decide what to send  
                    (currentTermRPC(rpc(msg)) == currentTerm && isRequestVoteRequest(rpc(msg)) && hasVoteTermEqual(msg,log,votedFor)) -> (
                        %vote for the sender if log is okay
                        receiveFromNetwork(msg) 
                       .Node(votedFor = senderID(msg), replyToBeSent = message(Message(id, RequestVoteResponse(currentTerm, true) , senderID(msg))))
                    ) 
                    +
                    (currentTermRPC(rpc(msg)) == currentTerm && isRequestVoteRequest(rpc(msg)) && !hasVoteTermEqual(msg,log,votedFor)) -> 
                        % don't vote if log is not okay or we've voted for someone else
                        receiveFromNetwork(msg)
                       .Node(replyToBeSent = message(Message(id, RequestVoteResponse(currentTerm, false) , senderID(msg))))
                +
                (currentTermRPC(rpc(msg)) == currentTerm && isRequestVoteResponse(rpc(msg))) -> (
                    % vote was granted and we have obtained majority votes 
                    (isVoteGranted(rpc(msg)) && # voterLog +1 >= MAJORITY) -> 
                        % become the leader if majority is obtained
                        receiveFromNetwork(msg) 
                       .Node(voterLog = voterLog <| senderID(msg), currentState = Leader, nextIndex = initArray(# log, NumberOfServers), matchIndex = initArray(0, NumberOfServers))
                    +
                    % vote was granted but we have not obtained majority votes
                    (isVoteGranted(rpc(msg)) &&  #voterLog +1 < MAJORITY) -> 
                        receiveFromNetwork(msg)
                       .Node(voterLog = voterLog <| senderID(msg))
                    +
                    % vote was not granted
                    (!isVoteGranted(rpc(msg))) -> 
                        receiveFromNetwork(msg) 
                       .Node()
                )
                + 
                (currentTermRPC(rpc(msg)) >= currentTerm && isAppendEntriesRequest(rpc(msg))) -> 
                (
                    % heartbeat message
                    ( LogOK(msg,log) && entries(rpc(msg)) == [] ) -> 
                         receiveFromNetwork(msg)
                        .Node(currentState = Follower, commitIndex = leaderCommit(rpc(msg)), replyToBeSent = message(Message(id, AppendEntriesResponse(currentTerm, true, prevLogIndex(rpc(msg))), senderID(msg))))
                    +
                     % normal append entry message
                     % check for conflict with leader
                     % hard coded to assume only one entry in the message
                     % append entry in the log if it is missing
                     % conflict and entries missing
                     (LogOK(msg,log) &&  entries(rpc(msg)) != [] && ConflictWithLeader(msg,log) && SliceLengthSmaller(log,msg)) -> ( %(25/12)TW: slice is shorter, so slice is entire log
                         receiveFromNetwork(msg)
                        .Node(currentState = Follower, log = log ++ entries(rpc(msg)), commitIndex = leaderCommit(rpc(msg)), replyToBeSent = message(Message(id, AppendEntriesResponse(currentTerm, true, prevLogIndex(rpc(msg)) + 1), senderID(msg))))
                     )
                     +
                     (LogOK(msg,log) && entries(rpc(msg)) != [] && ConflictWithLeader(msg,log) && !SliceLengthSmaller(log,msg)) ->  
                     % conflict and no entries missing
                         receiveFromNetwork(msg)
                        .Node(currentState = Follower, log = slice(log, 0, prevLogIndex(rpc(msg))), commitIndex = leaderCommit(rpc(msg)), replyToBeSent = message(Message(id, AppendEntriesResponse(currentTerm, true, prevLogIndex(rpc(msg)) + 1), senderID(msg))))
                     +
                     % no conflict and entry missing
                     (LogOK(msg,log) && entries(rpc(msg)) != [] && SliceLengthEqual(log,msg)) -> (
                         receiveFromNetwork(msg)
                        .Node(currentState = Follower, log = log ++ entries(rpc(msg)), commitIndex = leaderCommit(rpc(msg)), replyToBeSent = message(Message(id, AppendEntriesResponse(currentTerm, true, prevLogIndex(rpc(msg)) + 1), senderID(msg))))
                     )
                     +
                     (LogOK(msg,log) && entries(rpc(msg)) != [] && NoConflictWithLeader(msg,log) ) -> 
                     % no conflict and no entry missing
                         receiveFromNetwork(msg)
                        .Node(currentState = Follower, commitIndex = leaderCommit(rpc(msg)), replyToBeSent = message(Message(id, AppendEntriesResponse(currentTerm, true, prevLogIndex(rpc(msg)) + 1), senderID(msg))))

                    +
                    % log is not okay
                    (!LogOK(msg,log)) -> 
                         receiveFromNetwork(msg) 
                        .Node(currentState = Follower, replyToBeSent = message(Message(id, AppendEntriesResponse(currentTerm, false, 0), senderID(msg))))
                )
                +
                (currentTermRPC(rpc(msg)) == currentTerm && isAppendEntriesResponse(rpc(msg))) -> 
                (
                    % update nextIndex and matchIndex, advance commit index
                    (success(rpc(msg)) && isAdvanceCommitIndexOk(msg,log,replace(matchIndex, senderID(msg), matchIndexRPC(rpc(msg))),commitIndex,currentTerm)) -> 
                              receiveFromNetwork(msg) 
                             .advanceCommitIndex(commitIndex, findMaxAgreeIndex(# log, matchIndex), currentTerm, log) 
                             .Node(nextIndex = replace(nextIndex, senderID(msg), matchIndexRPC(rpc(msg))+1), matchIndex = replace(matchIndex, senderID(msg), matchIndexRPC(rpc(msg))), commitIndex = findMaxAgreeIndex(# log, replace(matchIndex, senderID(msg), matchIndexRPC(rpc(msg)))))
                    +
                    % update nextIndex and matchIndex
                    (success(rpc(msg)) && !isAdvanceCommitIndexOk(msg,log,replace(matchIndex, senderID(msg), matchIndexRPC(rpc(msg))),commitIndex,currentTerm)) -> 
                              receiveFromNetwork(msg) 
                             .Node(nextIndex = replace(nextIndex, senderID(msg), matchIndexRPC(rpc(msg))+1), matchIndex = replace(matchIndex, senderID(msg), matchIndexRPC(rpc(msg))))
                    +
                    % update nextIndex, advance commit index
                    (!success(rpc(msg)) && isAdvanceCommitIndexOk(msg,log,matchIndex,commitIndex,currentTerm)) -> 
                               receiveFromNetwork(msg) 
                              .advanceCommitIndex(commitIndex, findMaxAgreeIndex(# log, matchIndex), currentTerm, log) 
                              .Node(nextIndex = replace(nextIndex, senderID(msg), max(0, (nextIndex . senderID(msg)) - 1)), commitIndex = findMaxAgreeIndex(# log, matchIndex)) 
                    +
                    % update nextIndex
                    (!success(rpc(msg)) && !isAdvanceCommitIndexOk(msg,log,matchIndex,commitIndex,currentTerm)) -> 
                               receiveFromNetwork(msg)
                              .Node(nextIndex = replace(nextIndex, senderID(msg), max(0, (nextIndex . senderID(msg)) - 1)))
                )
            )
        )
;

proc Node_process_sendToNetwork(id:Nat, currentState: State, currentTerm: Nat, log: LogType, commitIndex: Nat,
votedFor: Int, voterLog: List(Nat), nextIndex: List(Nat), matchIndex: List(Nat), replyToBeSent: replyHelper) = 
      % handle reply which needs to be sent
        (!IsNone(replyToBeSent)) -> (
            sendToNetwork(reply(replyToBeSent)) . Node (replyToBeSent = none)
        )
        +
        % candidates can request votes
        ((currentState == Candidate) && IsNone(replyToBeSent)) -> (
            % send request vote RPCs (only to people not in voterlog)
            sendToNetworkSet(CreateRequestVoteSet(id, currentTerm, # log, lastTerm(log), voterLog)) . Node()
        )
        +
        % leaders can receive client commands, send append entry requests 
        ((currentState == Leader) && IsNone(replyToBeSent)) -> (
            % receive messages from clients
            (sum clientCommandID: Nat . recvClientRequest(clientCommandID) . Node(log = log <| Command(currentTerm, clientCommandID)))
            +
            % send append entry requests or heartbeats to servers
            sendToNetworkSet(CreateAppendEntriesSet(id, nextIndex, currentTerm, log, commitIndex)) . Node()
        );


% Node process
proc Node(id: Nat, currentState: State, currentTerm: Nat, log: LogType, commitIndex: Nat, 
votedFor: Int, voterLog: List(Nat), nextIndex: List(Nat), matchIndex: List(Nat), replyToBeSent: replyHelper) = 
    (currentState != Crashed) -> (
        (IsNone(replyToBeSent)) -> Node_process_receiveFromNetwork(id, currentState, currentTerm, log, commitIndex, votedFor, voterLog, nextIndex, matchIndex, replyToBeSent)
        +
        Node_process_sendToNetwork(id, currentState, currentTerm, log, commitIndex, votedFor, voterLog, nextIndex, matchIndex, replyToBeSent)
        +
        % Followers can transition into a candidate states by timing out
        (currentState != Leader  && currentTerm < MaxTerm) -> (
            timeout . Node(currentState = Candidate, currentTerm = currentTerm + 1, votedFor = Nat2Int(id), voterLog = [id], replyToBeSent = none)
        )
		    +
        exposeLog(id, currentTerm, commitIndex, log) . Node()        
    
    );

% healthy and reliable network which doesn't loose messages
proc HealthyNetwork(messageCollection: FSet(NetworkPayload)) = 
            % receive messages from server
            (# messageCollection < NetworkSize) -> sum msg: NetworkPayload . (receiveFromServer(msg) . HealthyNetwork(messageCollection = messageCollection + {msg}))
            +
            (# messageCollection + NumberOfServers < NetworkSize + 1) -> sum msgSet: FSet(NetworkPayload) . (receiveFromServerSet(msgSet) . HealthyNetwork(messageCollection = messageCollection + msgSet))
            +
            sum msg: NetworkPayload . (
                (msg in messageCollection) -> (
                    sendToServer(msg) . HealthyNetwork(messageCollection = messageCollection - {msg})
                )
            );

% client process
proc Client(clientCommandID: Pos) = 
     ((clientCommandID <= NumberOfClientRequests) -> sendClientRequest(clientCommandID) . Client(clientCommandID+1));

% initial configuration
init allow( {sendRPC, receiveRPC, clientCommand, advanceCommitIndex, timeout, sendRPCset, exposeLeader, exposeLog, exposeLogLeader},
               comm (
                    {
                         sendClientRequest | recvClientRequest -> clientCommand,
                         sendToNetwork | receiveFromServer -> sendRPC, 
                         sendToServer | receiveFromNetwork -> receiveRPC,
                         sendToNetworkSet | receiveFromServerSet -> sendRPCset
                    },
                         Client(1) 
                      || Node(id = 0, currentState = Follower, currentTerm = 1, log = [], commitIndex = 0,
                              votedFor = -1, voterLog = [], nextIndex = initArray(0, NumberOfServers), matchIndex = initArray(0, NumberOfServers), replyToBeSent = none) 
                      || Node(id = 1, currentState = Follower, currentTerm = 1, log = [], commitIndex = 0,
                              votedFor = -1, voterLog = [], nextIndex = initArray(0, NumberOfServers), matchIndex = initArray(0, NumberOfServers), replyToBeSent = none) 
                      || Node(id = 2, currentState = Follower, currentTerm = 1, log = [], commitIndex = 0,
                              votedFor = -1, voterLog = [], nextIndex = initArray(0, NumberOfServers), matchIndex = initArray(0, NumberOfServers), replyToBeSent = none) 
                      || HealthyNetwork(messageCollection = {})
                    )

);
